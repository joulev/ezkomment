import { ImageResponse } from "@vercel/og";
import clsx from "clsx";
import { NextRequest } from "next/server";

export const config = { runtime: "experimental-edge" };

function fetchFont() {
  const getURL = (w: 300 | 600 | 800) =>
    `https://ezkomment.joulev.dev/fonts/inter-v12-latin-${w}.woff`;
  const getFont = (w: 300 | 600 | 800) => fetch(getURL(w)).then(res => res.arrayBuffer());
  return Promise.all([getFont(300), getFont(600), getFont(800)]);
}

function Logo() {
  return (
    <svg
      width="397"
      height="80"
      viewBox="0 0 397 80"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clip-path="url(#clip0_217_197)">
        <path
          d="M39.601 0C16.8304 0 0 15.6246 0 33.2652C0 49.9866 14.2325 59.9151 21.6181 63.0508C22.2053 63.3001 22.444 64.0268 22.1014 64.5727L13.3979 78.4435C12.8509 79.3152 13.7942 80.36 14.6933 79.8782L39.3845 66.6464C39.5267 66.5702 39.6867 66.5306 39.8474 66.5298C62.4928 66.4176 79.202 50.8421 79.202 33.2652C79.202 15.6246 62.3716 0 39.601 0ZM36.6309 54.434L16.8304 37.2974L21.7805 31.2491L35.6409 43.3456L56.4314 19.1527L62.3716 24.1929L36.6309 54.434Z"
          fill="white"
        />
      </g>
      <path
        d="M125.012 55.625L123.075 51.25C120.242 52.75 117.575 53.5 115.075 53.5C111.367 53.5 108.867 51.6458 107.575 47.9375C107.2 46.7292 106.95 45.4167 106.825 44H125.637V42C125.637 31.625 121.846 26.2708 114.262 25.9375C113.971 25.9375 113.7 25.9375 113.45 25.9375C108.908 25.9375 105.408 27.7708 102.95 31.4375C101.033 34.2708 100.075 37.8333 100.075 42.125C100.075 48.7917 102.158 53.5625 106.325 56.4375C108.658 58.0208 111.367 58.8125 114.45 58.8125C118.158 58.7708 121.679 57.7083 125.012 55.625ZM113.387 31C116.304 31 118.117 32.6667 118.825 36C118.992 36.9583 119.075 37.9792 119.075 39.0625L106.95 39.1875C107.575 34.5208 109.304 31.8333 112.137 31.125C112.554 31.0417 112.971 31 113.387 31ZM136.637 53.25L150.887 30.25V26.75H129.512V31.4375H143.2L129.075 54.6875V58H151.137V53.25H136.637ZM180.7 58.8125C181.45 58.8125 182.325 58.7083 183.325 58.5L183.012 53.75H182.2C181.325 53.6667 180.575 53.1042 179.95 52.0625L173.325 40.5L182.075 26.75H175.575L169.075 37.3125L163.825 37.375V12.6875H157.325V58H163.825V42.625H168.137L174.637 54.4375C175.929 56.7292 177.325 58.1042 178.825 58.5625C179.408 58.7292 180.033 58.8125 180.7 58.8125ZM198.45 53.5C195.283 53.5 193.158 51.5833 192.075 47.75C191.658 46.1667 191.45 44.375 191.45 42.375C191.45 37 192.846 33.5417 195.637 32C196.554 31.5 197.533 31.25 198.575 31.25C201.825 31.25 203.95 33.2917 204.95 37.375C205.325 38.875 205.512 40.5833 205.512 42.5C205.512 48.0417 204.054 51.5208 201.137 52.9375C200.304 53.3125 199.408 53.5 198.45 53.5ZM198.7 25.9375C193.325 25.9375 189.408 28.1875 186.95 32.6875C185.492 35.4375 184.762 38.7083 184.762 42.5C184.762 49.4167 186.825 54.2083 190.95 56.875C192.992 58.1667 195.408 58.8125 198.2 58.8125C203.95 58.8125 207.992 56.3958 210.325 51.5625C211.533 48.9792 212.137 45.9167 212.137 42.375C212.137 35.1667 209.992 30.2708 205.7 27.6875C203.7 26.5208 201.367 25.9375 198.7 25.9375ZM258.825 36.75C258.825 31.9583 257.283 28.6875 254.2 26.9375C252.95 26.2708 251.575 25.9375 250.075 25.9375C246.742 25.9375 243.992 27.5208 241.825 30.6875C241.575 31.1042 241.346 31.5 241.137 31.875C239.929 28.5 237.7 26.5625 234.45 26.0625C233.95 25.9792 233.45 25.9375 232.95 25.9375C229.783 25.9375 227.137 27.3333 225.012 30.125C224.804 30.4167 224.617 30.7083 224.45 31L224.325 26.75H218.137V58H224.637V41.25C224.637 36.3333 225.95 33.1458 228.575 31.6875C229.367 31.2708 230.179 31.0625 231.012 31.0625C233.262 31.0625 234.658 32.3958 235.2 35.0625C235.367 35.7708 235.45 36.5417 235.45 37.375V58H241.95V41.25C241.95 36.125 243.283 32.8958 245.95 31.5625C246.658 31.2292 247.387 31.0625 248.137 31.0625C250.221 31.0625 251.533 32.3542 252.075 34.9375C252.242 35.6875 252.325 36.5 252.325 37.375V51.625C252.325 56.5 254.596 58.875 259.137 58.75C259.929 58.75 260.742 58.6667 261.575 58.5L261.325 53.6875C259.867 53.8958 259.054 53.375 258.887 52.125C258.846 51.8333 258.825 51.5208 258.825 51.1875V36.75ZM307.95 36.75C307.95 31.9583 306.408 28.6875 303.325 26.9375C302.075 26.2708 300.7 25.9375 299.2 25.9375C295.867 25.9375 293.117 27.5208 290.95 30.6875C290.7 31.1042 290.471 31.5 290.262 31.875C289.054 28.5 286.825 26.5625 283.575 26.0625C283.075 25.9792 282.575 25.9375 282.075 25.9375C278.908 25.9375 276.262 27.3333 274.137 30.125C273.929 30.4167 273.742 30.7083 273.575 31L273.45 26.75H267.262V58H273.762V41.25C273.762 36.3333 275.075 33.1458 277.7 31.6875C278.492 31.2708 279.304 31.0625 280.137 31.0625C282.387 31.0625 283.783 32.3958 284.325 35.0625C284.492 35.7708 284.575 36.5417 284.575 37.375V58H291.075V41.25C291.075 36.125 292.408 32.8958 295.075 31.5625C295.783 31.2292 296.512 31.0625 297.262 31.0625C299.346 31.0625 300.658 32.3542 301.2 34.9375C301.367 35.6875 301.45 36.5 301.45 37.375V51.625C301.45 56.5 303.721 58.875 308.262 58.75C309.054 58.75 309.867 58.6667 310.7 58.5L310.45 53.6875C308.992 53.8958 308.179 53.375 308.012 52.125C307.971 51.8333 307.95 51.5208 307.95 51.1875V36.75ZM339.387 55.625L337.45 51.25C334.617 52.75 331.95 53.5 329.45 53.5C325.742 53.5 323.242 51.6458 321.95 47.9375C321.575 46.7292 321.325 45.4167 321.2 44H340.012V42C340.012 31.625 336.221 26.2708 328.637 25.9375C328.346 25.9375 328.075 25.9375 327.825 25.9375C323.283 25.9375 319.783 27.7708 317.325 31.4375C315.408 34.2708 314.45 37.8333 314.45 42.125C314.45 48.7917 316.533 53.5625 320.7 56.4375C323.033 58.0208 325.742 58.8125 328.825 58.8125C332.533 58.7708 336.054 57.7083 339.387 55.625ZM327.762 31C330.679 31 332.492 32.6667 333.2 36C333.367 36.9583 333.45 37.9792 333.45 39.0625L321.325 39.1875C321.95 34.5208 323.679 31.8333 326.512 31.125C326.929 31.0417 327.346 31 327.762 31ZM372.012 53.6875C370.596 53.8958 369.804 53.375 369.637 52.125C369.596 51.8333 369.575 51.5208 369.575 51.1875V36.75C369.575 31.75 367.908 28.4375 364.575 26.8125C363.325 26.2292 361.95 25.9375 360.45 25.9375C356.783 25.9792 353.929 27.6875 351.887 31.0625L351.762 26.75H345.512V58H352.012V41.4375C352.012 36.5208 353.325 33.3125 355.95 31.8125C356.783 31.3542 357.637 31.125 358.512 31.125C360.804 31.125 362.242 32.4583 362.825 35.125C362.992 35.8333 363.075 36.6042 363.075 37.4375V51.625C363.158 56.3333 365.325 58.7083 369.575 58.75C370.367 58.75 371.262 58.6458 372.262 58.4375L372.012 53.6875ZM394.887 56.4375L393.137 52.4375C391.846 53.1458 390.721 53.5 389.762 53.5C387.429 53.4167 386.242 51.7292 386.2 48.4375V31.625H393.075V26.75H386.2V18.3125H379.7V26.75H375.387V31.625H379.7V49.125C379.7 54.5833 381.679 57.75 385.637 58.625C386.346 58.75 387.054 58.8125 387.762 58.8125C390.054 58.7708 392.429 57.9792 394.887 56.4375Z"
        fill="white"
      />
      <defs>
        <clipPath id="clip0_217_197">
          <rect width="79.202" height="80" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
}

export default async function handler(req: NextRequest) {
  const searchParams = new URL(req.url).searchParams;
  const pretitle = searchParams.get("title");
  const title = pretitle
    ? pretitle.substring(0, 45) + (pretitle.length > 45 ? "â€¦" : "")
    : undefined;
  const prelabel = searchParams.get("label");
  const label = prelabel?.toUpperCase();

  const font = await fetchFont();
  const options: ConstructorParameters<typeof ImageResponse>[1] = {
    width: 1200,
    height: 630,
    fonts: [
      { name: "Inter", data: font[0], style: "normal", weight: 300 },
      { name: "Inter", data: font[1], style: "normal", weight: 600 },
      { name: "Inter", data: font[2], style: "normal", weight: 800 },
    ],
  };

  return new ImageResponse(
    (
      <div
        tw={clsx(
          "w-screen h-screen px-32 py-40 flex flex-col justify-center text-white",
          title === undefined && "items-center"
        )}
        style={{
          fontFamily: "Inter",
          fontSize: title && title.length > 32 ? 72 : 80,
          backgroundImage: "linear-gradient(177.7deg, #818cf8, #4f46e5)", // TODO: to bottom right instead, vercel/satori#278
        }}
      >
        <div tw="flex flex-row items-center mb-12">
          <div tw={clsx("flex", label && "pr-8 border-r border-neutral-100")}>
            <Logo />
          </div>
          {label && (
            <div tw="pl-8" style={{ fontSize: 48, fontWeight: 300 }}>
              {label}
            </div>
          )}
        </div>
        {title ? (
          <div tw="-my-4" style={{ fontWeight: 600, lineHeight: 1.25 }}>
            {title}
          </div>
        ) : (
          <div tw="flex text-white" style={{ fontWeight: 300, letterSpacing: "-0.05em" }}>
            Commenting made{" "}
            <span style={{ fontWeight: 800, letterSpacing: 0 }} tw="pl-5">
              easy
            </span>
            .
          </div>
        )}
      </div>
    ),
    options
  );
}
